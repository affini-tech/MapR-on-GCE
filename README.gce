CONTENTS
--------
	create-mapr-image.sh : use gcutil to create a virtual instance
		that can be used as a base image for later cluster creation.
		Using a base image does not save much time over 
		"install everything at instantiation".  This script uses
		gcutil to create an instance and passes in the
		prepare-mapr-image.sh script as the startup process..

	prepare-mapr-image.sh : Install key dependencies (eg Java) and
		specified MapR software.  Script is used by create-mapr-image.sh,
		and by configure-mapr-instance.sh (if passed in as metadata).  
		The goal is to do the initial O/S configuration and enough useful
		preparation to deliver a reasonable image to be used to speed
		up deployment of a full cluster (rather than starting with
		just an O/S installation).

	launch-mr-cluster.sh : simple script to create a multi-node 
		MapReduce cluster within the GCE environment.  Can take as a 
		base image EITHER an image generated via the create-mapr-image.sh 
		script OR a basic Linux installation.  
			Recommended option: use basic Linux images only

	configure-mapr-instance.sh : configuration script executed on each
		instantiated VM.  The script will confirm proper installation
		of MapR software (via prepare-mapr-image.sh if necessary) and
		the complete the configuration based on metadata passed in
		to the script.
		

BACKGROUND READING
------------------
	http://mapr.com/doc/display/MapR/Installing+MapR+Software


# Creating a new image for Google Compute with create-mapr-image.sh script
#	(which invokes prepare-mapr-image.sh on the instantiated virtual machine)
#
# Assumptions
#	- gcutil is installed on your client system
#	- a GCE project exists on which you can deploy instances
#	- that same GCE project has GoogleStorage capacity for you to store
#	  the tarballs of the root images.


NOTE:  Skip to Step 5 for most deployments ... no need for generating
a fixed image with MapR software pre-installed given the capabilities
of the configure-mapr-instance.sh startup script.


Step 0 : Understanding the GCE model
------------------------------------
	The scripts take advantage of the Google Compute Engine infrastructure,
	which allows configuration scripts and other meta-data to be passed
	in to an instance being launched in the cloud.  


Step 1 : Create a running instance from which to generate MapR base image
-------------------------------------------------------------------------
	The create-mapr-image.sh script handles this task.
	It takes the GCE project as an argument, along with the base image 
	type (eg Ubuntu-12-04 or Centos-6-2) and the MapR version.   The image 
	type will come from Google.
		create-map-image.sh passes the prepare-mapr-image.sh into the
		launched instance in order to install prerequesites and some
		basic MapR software.

	You can ssh in to the instance once it's running and confirm 
	the proper setup.   The log file from prepare-mapr-image.sh is
	at /tmp/prepare-mapr-image.log ... so you can validate that the 
	sofware was installed successfully.
		NOTE: you will be able to access this running instance
		via SSH  BEFORE  the prepare-mapr-image.sh script is complete.
		Be careful not to mess anything up.  A good sanity check is
		to watch for the availability of the mapr user and the
		presence of the /opt/mapr software installation directory.


Step 2 : Archive the boot disk of the instance
----------------------------------------------
	See https://developers.google.com/compute/docs/images?hl=en 
	for more details on this step.

	The Google instances have tools to help with this.  On the
	running instance, use the command
		sudo python /usr/share/imagebundle/image_bundle.py -r / -o /tmp/ \
			--log_file=/tmp/MapR_base_image.log

	The resulting image.tar.gz file in /tmp will have a strange name ...
	rename it to something rational and save it to Google Storage
		gsutil config
		gsutil mb gs://<images_bucket>		# make a new bucket
		gsutil cp /tmp/MapR-2.1.1_trial.image.tar.gz gs://<images_bucket>

			NOTE: The mechanics of who can see which buckets is a little
			confusing.  I was not able to see the images from the web
			interface to Google Storage, but my command-line access from
			the same system was just fine.  


Step 3 : Create an image for use in later deployments
-----------------------------------------------------
	For our 2.1.1 image, it was as simple as 
		gcutil --project=<PROJECT_ID> addimage \
			mapr-211-17042-trial-ubuntu-1204  \
			gs://<images_bucket>/MapR-2.1.1_trial.image.tar.gz

	NOTE: 
		For reasons known only to Google, the image name
		MUST start with a lower case letter.  Trying to name
		and image "MapR-2.1.1" will fail".

	NOTE: image can be deleted with "gcutil deleteimage" command


Step 4 : Test out the instantiation of the instance
---------------------------------------------------
	Again for our 2.1.1 image, this was a simple test
		gcutil --project=<PROJECT_ID>  addinstance \
			--zone=us-central2-a \
			--machine_type=n1-standard-2-d \
			--image="mapr-211-17042-trial-ubuntu-1204" \
			--wait_until_running mapr1


Step 5 : Test out custom instantiation as done by launch*cluster scripts
------------------------------------------------------------------------
	The launch*cluser scripts pass in additional metadata and
	a startup script to the mapr-<version> image, enabling a
	single-click installation of an entire cluster.  The cluster image 
	should work fine with those (see notes in configure-mapr-instance.sh
	for information on what configuration is expected to be done
	in prepare-mapr-image.sh vs when the image is instantiated 
	in a cluster).

	

